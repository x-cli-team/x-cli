name: Testimonials Auto-Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "data/testimonials.yml"
      - "data/schemas/testimonial.schema.json"

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  testimonials-validate-and-merge:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          
      - name: Install validation dependencies
        run: |
          npm install js-yaml ajv ajv-formats
          
      - name: Validate testimonial schema
        run: |
          node - <<'EOF'
          const fs = require('fs');
          const yaml = require('js-yaml');
          const Ajv = require('ajv');
          const addFormats = require('ajv-formats');
          
          console.log('üîç Validating testimonial schema...');
          
          try {
            // Load schema and data
            const schema = JSON.parse(fs.readFileSync('data/schemas/testimonial.schema.json', 'utf8'));
            const data = yaml.load(fs.readFileSync('data/testimonials.yml', 'utf8'));
            
            // Setup AJV validator
            const ajv = new Ajv({ allErrors: true });
            addFormats(ajv);
            
            const validate = ajv.compile(schema);
            const valid = validate(data);
            
            if (!valid) {
              console.error('‚ùå Schema validation failed:');
              validate.errors.forEach(error => {
                console.error(`  - ${error.instancePath}: ${error.message}`);
              });
              process.exit(1);
            }
            
            console.log('‚úÖ Schema validation passed');
            console.log(`üìä Total testimonials: ${data.length}`);
            
          } catch (error) {
            console.error('‚ùå Schema validation error:', error.message);
            process.exit(1);
          }
          EOF
          
      - name: Ensure only allowed files changed
        run: |
          set -e
          echo "üîç Checking changed files..."
          
          CHANGED=$(git diff --name-only origin/${{ github.base_ref }}... | tr '\n' ' ')
          echo "Changed files: $CHANGED"
          
          if [ -z "$CHANGED" ]; then
            echo "‚ùå No files changed"
            exit 1
          fi
          
          for f in $CHANGED; do
            case "$f" in
              data/testimonials.yml)
                echo "‚úÖ Allowed change: $f"
                ;;
              data/schemas/testimonial.schema.json)
                echo "‚úÖ Allowed change: $f (schema update)"
                ;;
              *) 
                echo "‚ùå Disallowed change: $f"
                echo "   Only data/testimonials.yml and data/schemas/testimonial.schema.json are allowed"
                exit 1
                ;;
            esac
          done
          
          echo "‚úÖ File change validation passed"
          
      - name: Content moderation and validation
        run: |
          node - <<'EOF'
          const fs = require('fs');
          const yaml = require('js-yaml');
          const { URL } = require('url');
          
          console.log('üîç Running content moderation...');
          
          try {
            const data = yaml.load(fs.readFileSync('data/testimonials.yml', 'utf8'));
            
            // Banned words and phrases (extend as needed)
            const bannedWords = /\b(spam|scam|fake|test123|bullshit|shit|fuck|damn|crap|sucks|terrible|awful|hate)\b/i;
            
            // Allowed domains for profile links
            const allowedHosts = new Set([
              'github.com', 'github.io',
              'linkedin.com', 'www.linkedin.com',
              'twitter.com', 'x.com', 'www.twitter.com',
              'dev.to', 'www.dev.to',
              'medium.com', 'www.medium.com',
              'stackoverflow.com', 'www.stackoverflow.com',
              'hashnode.com', 'www.hashnode.com',
              'personal-site.dev', 'yourname.dev', 'portfolio.dev'
            ]);
            
            for (const testimonial of data) {
              console.log(`Validating testimonial from ${testimonial.name}...`);
              
              // Length validation
              if (testimonial.quote.length > 480) {
                throw new Error(`Quote too long for ${testimonial.name}: ${testimonial.quote.length} characters (max 480)`);
              }
              
              if (testimonial.quote.length < 10) {
                throw new Error(`Quote too short for ${testimonial.name}: ${testimonial.quote.length} characters (min 10)`);
              }
              
              // Content moderation
              if (bannedWords.test(testimonial.quote)) {
                console.warn(`‚ö†Ô∏è Potentially inappropriate content detected for ${testimonial.name}`);
                // Don't fail, just warn for now - can be made stricter later
              }
              
              // Link validation
              try {
                const url = new URL(testimonial.link);
                const hostname = url.hostname.replace(/^www\./, '');
                
                const isAllowed = Array.from(allowedHosts).some(allowed => 
                  hostname === allowed || hostname.endsWith(`.${allowed}`)
                );
                
                if (!isAllowed) {
                  console.warn(`‚ö†Ô∏è Non-allowlisted domain: ${hostname} for ${testimonial.name}`);
                  console.warn(`   Consider adding to allowlist if this is a legitimate domain`);
                  // Don't fail - just warn for manual review
                }
                
              } catch (e) {
                throw new Error(`Invalid URL for ${testimonial.name}: ${testimonial.link} - ${e.message}`);
              }
              
              // Avatar URL validation (if provided)
              if (testimonial.avatar) {
                try {
                  new URL(testimonial.avatar);
                } catch (e) {
                  throw new Error(`Invalid avatar URL for ${testimonial.name}: ${testimonial.avatar}`);
                }
              }
              
              // Required fields validation
              const required = ['name', 'title', 'company', 'quote', 'link'];
              for (const field of required) {
                if (!testimonial[field] || testimonial[field].toString().trim().length === 0) {
                  throw new Error(`Missing or empty required field '${field}' for ${testimonial.name}`);
                }
              }
              
              // Name validation (no just initials or single words)
              if (testimonial.name.trim().split(' ').length < 2) {
                throw new Error(`Name must include first and last name for ${testimonial.name}`);
              }
              
              // Check for potential spam patterns
              const spamPatterns = [
                /^(.)\1{3,}/, // Repeated characters
                /test.*test/i,
                /example.*example/i,
                /lorem.*ipsum/i
              ];
              
              for (const pattern of spamPatterns) {
                if (pattern.test(testimonial.quote) || pattern.test(testimonial.name)) {
                  throw new Error(`Spam pattern detected in submission from ${testimonial.name}`);
                }
              }
            }
            
            // Check for duplicate testimonials
            const names = new Map();
            const links = new Map();
            
            for (const testimonial of data) {
              const nameLower = testimonial.name.toLowerCase();
              const linkNormalized = testimonial.link.toLowerCase().replace(/\/$/, '');
              
              if (names.has(nameLower)) {
                throw new Error(`Duplicate testimonial from ${testimonial.name} (name already exists)`);
              }
              names.set(nameLower, testimonial);
              
              if (links.has(linkNormalized)) {
                throw new Error(`Duplicate testimonial with link ${testimonial.link} (link already used)`);
              }
              links.set(linkNormalized, testimonial);
            }
            
            console.log('‚úÖ Content moderation passed');
            console.log(`üìä Validated ${data.length} testimonials`);
            
          } catch (error) {
            console.error('‚ùå Content validation failed:', error.message);
            process.exit(1);
          }
          EOF
          
      - name: Validate YAML syntax
        run: |
          echo "üîç Validating YAML syntax..."
          node -e "
            const fs = require('fs');
            const yaml = require('js-yaml');
            try {
              yaml.load(fs.readFileSync('data/testimonials.yml', 'utf8'));
              console.log('‚úÖ YAML syntax is valid');
            } catch (e) {
              console.error('‚ùå YAML syntax error:', e.message);
              process.exit(1);
            }
          "
          
      - name: Add auto-merge label
        if: success()
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: |
            automerge
            validated
            
      - name: Add validation success comment
        if: success()
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## ‚úÖ Automated Validation Passed!
            
            All checks have passed successfully:
            
            - ‚úÖ **Schema validation**: Testimonial format is correct
            - ‚úÖ **Content moderation**: Content meets community guidelines  
            - ‚úÖ **File validation**: Only allowed files were modified
            - ‚úÖ **Duplicate check**: No duplicate testimonials found
            - ‚úÖ **Link verification**: Profile links are valid
            
            üöÄ **This PR will auto-merge shortly** and your testimonial will be live within minutes!
            
            Thank you for contributing to the X-CLI community! üéâ
            
      - name: Enable auto-merge
        if: success()
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          merge-method: squash
          
      - name: Add validation failure comment
        if: failure()
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## ‚ùå Automated Validation Failed
            
            The testimonial submission didn't pass our validation checks. Common issues:
            
            - **Schema errors**: Missing required fields or incorrect format
            - **Content issues**: Inappropriate content or spam patterns detected
            - **Link problems**: Invalid or non-allowlisted profile URLs
            - **File changes**: Unauthorized file modifications
            - **Duplicates**: Testimonial from this person/link already exists
            
            ### üîß How to fix:
            
            1. **Check the workflow logs** above for specific error details
            2. **Update your testimonial** by editing the issue and resubmitting
            3. **Need help?** Ask in our [Discord community](https://discord.com/channels/1315720379607679066/1315822328139223064)
            
            The validation failure details are in the "Actions" tab above. ‚¨ÜÔ∏è