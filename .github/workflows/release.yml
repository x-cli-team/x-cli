# 🚨 CRITICAL WARNING: AUTOMATED RELEASE WORKFLOW
#
# This workflow handles automated NPM publishing and version management.
# It took multiple iterations to get working correctly.
#
# DO NOT MODIFY without understanding the full dependency chain:
# - GitHub Secrets: PAT_TOKEN, NPM_TOKEN (required)
# - Package name: "@xagent/x-cli" (NEVER change)
# - Git hooks: .husky/pre-commit + scripts/check-version.cjs
# - NPM authentication: Direct .npmrc creation (not npm config)
# - Dependency management: Clean install to avoid Rollup cache issues
#
# If this breaks, see troubleshooting docs:
# - .agent/sop/npm-publishing-troubleshooting.md
# - .agent/incidents/incident-npm-publish-failure.md
# - .agent/sop/release-management.md
#
# Last working config verified: 2025-10-17
# Working example: Successfully publishes version 1.0.87+
#
# ⚠️ TEST ALL CHANGES IN A FORK FIRST!

name: Release
on:
  push:
    branches: [main]

permissions:
  contents: write
  packages: write
  id-token: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      # Prevent loops if last commit was an automated bump or merge from release PR
      - name: Skip if previous commit was auto-bump or merge
        run: |
          if git log -1 --pretty=%B | grep -qiE "^Bump version to "; then
            echo "Auto-bump detected; skipping."
            exit 78
          fi
          if git log -1 --pretty=%B | grep -qi "Merge pull request"; then
            echo "Merge commit from release PR detected; skipping."
            exit 78
          fi

      - name: Bump patch version (no tag yet)
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          NEW_VER=$(npm version patch --no-git-tag-version)

          # Update README version to match package.json
          if [ -f README.md ]; then
            NEW_VER_NUMBER=${NEW_VER#v}
            sed -i "s/^## [0-9]\+\.[0-9]\+\.[0-9]\+/## ${NEW_VER_NUMBER}/g" README.md
            echo "Updated README.md to version ${NEW_VER_NUMBER}"
          fi

          git add package.json package-lock.json README.md || true
          git commit -m "Bump version to ${NEW_VER#v}"

      - name: Create release branch and PR
        run: |
          NEW_VER=$(node -p "require('./package.json').version")
          RELEASE_BRANCH="release/v${NEW_VER}"
          echo "NEW_VER=${NEW_VER}" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV

          git checkout -b $RELEASE_BRANCH
          git push origin $RELEASE_BRANCH

          # Create PR
          gh pr create --title "Release v${NEW_VER}" --body "Automated release bump to v${NEW_VER}" --base main --head $RELEASE_BRANCH --label "automated"

          # Approve PR
          PR_NUMBER=$(gh pr list --head $RELEASE_BRANCH --json number --jq '.[0].number')
          gh pr review $PR_NUMBER --approve

          # Merge PR
          gh pr merge $PR_NUMBER --merge --delete-branch
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Create tag and push
        run: |
          git tag "v${NEW_VER}"
          git push origin "v${NEW_VER}"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Configure npm auth
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build
        run: npm run build

      - name: Dry run (sanity check)
        run: npm publish --access public --dry-run

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # ---------- Publish to GitHub Packages ----------
      - name: Create scoped package.json for GitHub Packages
        run: |
          # Create a temporary package.json with scoped name for GitHub Packages
          cp package.json package.json.backup

          # Update package name to be scoped (required for GitHub Packages)
          sed -i 's/"name": "@xagent\/x-cli"/"name": "@x-cli-team\/x-cli"/' package.json

          echo "Created scoped package.json for GitHub Packages:"
          grep '"name":' package.json

      - name: Configure GitHub Packages registry
        run: |
          # Configure npm to publish scoped packages to GitHub Packages
          echo "@x-cli-team:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" >> .npmrc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to GitHub Packages
        run: |
          echo "Publishing scoped package to GitHub Packages..."
          npm publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore original package.json
        run: |
          # Restore original package.json to avoid affecting future operations
          mv package.json.backup package.json

      # ---------- Create GitHub Release ----------
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VER }}
          name: Release v${{ env.NEW_VER }}
          body: |
            ## 🚀 X-CLI v${{ env.NEW_VER }}

            ### Changes
            Automated release triggered by push to main branch.

            ### Installation
            ```bash
            npm install -g @xagent/x-cli@${{ env.NEW_VER }}
            # or
            npx @xagent/x-cli@${{ env.NEW_VER }}
            ```

            ### What's New
            - See [CHANGELOG.md](https://github.com/x-cli-team/x-cli/blob/main/CHANGELOG.md) for details
            - Full release notes available in commit history
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Cleanup
        run: |
          rm -f .npmrc
          echo "Restored original package.json"

      - name: Publish summary
        run: |
          NEW_VER=$(node -p "require('./package.json').version")
          echo "✅ Published @xagent/x-cli v${NEW_VER} to:"
          echo "  📦 NPM: https://www.npmjs.com/package/@xagent/x-cli"
          echo "  📦 GitHub Packages: https://github.com/x-cli-team/x-cli/pkgs/npm/x-cli"

# Test commit to verify branch protection bypass works
# Final test after bypass setup
